/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as SellersIndexImport } from './routes/sellers/index'
import { Route as BuyersIndexImport } from './routes/buyers/index'
import { Route as SellersSellerIdImport } from './routes/sellers/$sellerId'
import { Route as OptionsOptionIdImport } from './routes/options/$optionId'
import { Route as ItemsItemIdImport } from './routes/items/$itemId'
import { Route as BuyersBuyerIdImport } from './routes/buyers/$buyerId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SellersIndexRoute = SellersIndexImport.update({
  id: '/sellers/',
  path: '/sellers/',
  getParentRoute: () => rootRoute,
} as any)

const BuyersIndexRoute = BuyersIndexImport.update({
  id: '/buyers/',
  path: '/buyers/',
  getParentRoute: () => rootRoute,
} as any)

const SellersSellerIdRoute = SellersSellerIdImport.update({
  id: '/sellers/$sellerId',
  path: '/sellers/$sellerId',
  getParentRoute: () => rootRoute,
} as any)

const OptionsOptionIdRoute = OptionsOptionIdImport.update({
  id: '/options/$optionId',
  path: '/options/$optionId',
  getParentRoute: () => rootRoute,
} as any)

const ItemsItemIdRoute = ItemsItemIdImport.update({
  id: '/items/$itemId',
  path: '/items/$itemId',
  getParentRoute: () => rootRoute,
} as any)

const BuyersBuyerIdRoute = BuyersBuyerIdImport.update({
  id: '/buyers/$buyerId',
  path: '/buyers/$buyerId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/buyers/$buyerId': {
      id: '/buyers/$buyerId'
      path: '/buyers/$buyerId'
      fullPath: '/buyers/$buyerId'
      preLoaderRoute: typeof BuyersBuyerIdImport
      parentRoute: typeof rootRoute
    }
    '/items/$itemId': {
      id: '/items/$itemId'
      path: '/items/$itemId'
      fullPath: '/items/$itemId'
      preLoaderRoute: typeof ItemsItemIdImport
      parentRoute: typeof rootRoute
    }
    '/options/$optionId': {
      id: '/options/$optionId'
      path: '/options/$optionId'
      fullPath: '/options/$optionId'
      preLoaderRoute: typeof OptionsOptionIdImport
      parentRoute: typeof rootRoute
    }
    '/sellers/$sellerId': {
      id: '/sellers/$sellerId'
      path: '/sellers/$sellerId'
      fullPath: '/sellers/$sellerId'
      preLoaderRoute: typeof SellersSellerIdImport
      parentRoute: typeof rootRoute
    }
    '/buyers/': {
      id: '/buyers/'
      path: '/buyers'
      fullPath: '/buyers'
      preLoaderRoute: typeof BuyersIndexImport
      parentRoute: typeof rootRoute
    }
    '/sellers/': {
      id: '/sellers/'
      path: '/sellers'
      fullPath: '/sellers'
      preLoaderRoute: typeof SellersIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/buyers/$buyerId': typeof BuyersBuyerIdRoute
  '/items/$itemId': typeof ItemsItemIdRoute
  '/options/$optionId': typeof OptionsOptionIdRoute
  '/sellers/$sellerId': typeof SellersSellerIdRoute
  '/buyers': typeof BuyersIndexRoute
  '/sellers': typeof SellersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/buyers/$buyerId': typeof BuyersBuyerIdRoute
  '/items/$itemId': typeof ItemsItemIdRoute
  '/options/$optionId': typeof OptionsOptionIdRoute
  '/sellers/$sellerId': typeof SellersSellerIdRoute
  '/buyers': typeof BuyersIndexRoute
  '/sellers': typeof SellersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/buyers/$buyerId': typeof BuyersBuyerIdRoute
  '/items/$itemId': typeof ItemsItemIdRoute
  '/options/$optionId': typeof OptionsOptionIdRoute
  '/sellers/$sellerId': typeof SellersSellerIdRoute
  '/buyers/': typeof BuyersIndexRoute
  '/sellers/': typeof SellersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/buyers/$buyerId'
    | '/items/$itemId'
    | '/options/$optionId'
    | '/sellers/$sellerId'
    | '/buyers'
    | '/sellers'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/buyers/$buyerId'
    | '/items/$itemId'
    | '/options/$optionId'
    | '/sellers/$sellerId'
    | '/buyers'
    | '/sellers'
  id:
    | '__root__'
    | '/'
    | '/buyers/$buyerId'
    | '/items/$itemId'
    | '/options/$optionId'
    | '/sellers/$sellerId'
    | '/buyers/'
    | '/sellers/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BuyersBuyerIdRoute: typeof BuyersBuyerIdRoute
  ItemsItemIdRoute: typeof ItemsItemIdRoute
  OptionsOptionIdRoute: typeof OptionsOptionIdRoute
  SellersSellerIdRoute: typeof SellersSellerIdRoute
  BuyersIndexRoute: typeof BuyersIndexRoute
  SellersIndexRoute: typeof SellersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BuyersBuyerIdRoute: BuyersBuyerIdRoute,
  ItemsItemIdRoute: ItemsItemIdRoute,
  OptionsOptionIdRoute: OptionsOptionIdRoute,
  SellersSellerIdRoute: SellersSellerIdRoute,
  BuyersIndexRoute: BuyersIndexRoute,
  SellersIndexRoute: SellersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/buyers/$buyerId",
        "/items/$itemId",
        "/options/$optionId",
        "/sellers/$sellerId",
        "/buyers/",
        "/sellers/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/buyers/$buyerId": {
      "filePath": "buyers/$buyerId.tsx"
    },
    "/items/$itemId": {
      "filePath": "items/$itemId.tsx"
    },
    "/options/$optionId": {
      "filePath": "options/$optionId.tsx"
    },
    "/sellers/$sellerId": {
      "filePath": "sellers/$sellerId.tsx"
    },
    "/buyers/": {
      "filePath": "buyers/index.tsx"
    },
    "/sellers/": {
      "filePath": "sellers/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
